// Generated by CoffeeScript 1.9.1
(function() {
  var I, OrderedMap, builtin, concat, indexof, mixin, select, startswith,
    slice = [].slice;

  I = function(a) {
    return a;
  };

  builtin = I.bind.bind(I.call);

  startswith = function(s, i) {
    return s.slice(0, i.length) === i;
  };

  indexof = builtin(String.prototype.indexOf);

  concat = function() {
    var as, ref;
    as = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = []).concat.apply(ref, as);
  };

  mixin = function() {
    var j, k, len, o, os, r, v;
    os = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    r = {};
    for (j = 0, len = os.length; j < len; j++) {
      o = os[j];
      for (k in o) {
        v = o[k];
        r[k] = v;
      }
    }
    return r;
  };

  select = function(node, sel) {
    var doc;
    if (!node.parentNode) {
      doc = node.ownerDocument;
    }
    try {
      if (doc) {
        doc.body.appendChild(node);
      }
      switch (sel[0]) {
        case '.':
          return node.getElementsByClassName(sel.substring(1));
        case '#':
          return node.getElementById(sel.substring(1));
        default:
          return node.getElementsByTagName(sel);
      }
    } finally {
      if (doc) {
        doc.body.removeChild(node);
      }
    }
  };

  OrderedMap = (function() {
    function OrderedMap() {
      this.order = [];
      this.map = {};
    }

    OrderedMap.prototype.set = function(k, v) {
      if (!this.map.hasOwnProperty(k)) {
        this.order.push(k);
      }
      return this.map[k] = v;
    };

    OrderedMap.prototype.get = function(k) {
      return this.map[k];
    };

    return OrderedMap;

  })();

  module.exports = {
    startswith: startswith,
    indexof: indexof,
    select: select,
    concat: concat,
    mixin: mixin,
    OrderedMap: OrderedMap
  };

}).call(this);

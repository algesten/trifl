// Generated by CoffeeScript 1.9.0
(function() {
  var VDOMOut, capture, create, detach, diff, div, layout, patch, region, select, view, walk, _ref, _ref1,
    __slice = [].slice;

  _ref = require('virtual-dom'), diff = _ref.diff, patch = _ref.patch, create = _ref.create;

  _ref1 = require('tagg'), capture = _ref1.capture, div = _ref1.div;

  select = require('./fun').select;

  VDOMOut = require('./vdomout');

  view = function(f) {
    var render;
    render = function() {
      var as, ptch, vt;
      as = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      vt = capture(new VDOMOut(), f, as);
      ptch = diff(render._vt, vt);
      render.el = patch(render.el, ptch);
      render._vt = vt;
      return render.el;
    };
    render.el = create(render._vt = capture(new VDOMOut(), div));
    return render;
  };

  detach = function(view) {
    var _ref2, _ref3;
    if (!view) {
      return;
    }
    delete view._rg;
    return view != null ? (_ref2 = view.el) != null ? (_ref3 = _ref2.parentNode) != null ? _ref3.removeChild(view.el) : void 0 : void 0 : void 0;
  };

  region = function(n) {
    return {
      "data-region": n
    };
  };

  walk = function(node, f) {
    var c, _i, _len, _ref2, _results;
    f(node);
    _ref2 = node.childNodes;
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      c = _ref2[_i];
      _results.push(walk(c, f));
    }
    return _results;
  };

  layout = function(f) {
    var inner, makeRegionFunctions, regions, render;
    regions = {};
    inner = view(f);
    render = function() {
      var as, name, prevRegions, vw;
      as = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      try {
        for (name in regions) {
          vw = regions[name];
          if (vw) {
            detach(vw);
          }
        }
        return inner.apply(null, as);
      } finally {
        render.el = inner.el;
        prevRegions = regions;
        makeRegionFunctions();
        for (name in prevRegions) {
          vw = prevRegions[name];
          if (vw) {
            if (typeof render[name] === "function") {
              render[name](vw);
            }
          }
        }
      }
    };
    makeRegionFunctions = function() {
      regions = {};
      return walk(render.el, function(node) {
        var name, _ref2;
        name = (_ref2 = node.dataset) != null ? _ref2.region : void 0;
        if (!name) {
          return;
        }
        regions[name] = false;
        return render[name] = function(vw) {
          var prev, _ref3, _ref4;
          if (((_ref3 = (prev = regions[name])) != null ? (_ref4 = _ref3.el) != null ? _ref4.parentNode : void 0 : void 0) != null) {
            detach(prev);
          }
          if (vw) {
            if (vw._rg) {
              vw._rg(null);
            }
            regions[name] = vw;
            node.appendChild(vw.el);
            return vw._rg = render[name];
          } else {
            return delete regions[name];
          }
        };
      });
    };
    render();
    return render;
  };

  module.exports = {
    view: view,
    layout: layout,
    region: region
  };

}).call(this);

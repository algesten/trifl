// Generated by CoffeeScript 1.9.1
(function() {
  var OrderedMap, VDOMOut, _lazy, _lazylayout, capture, create, detach, diff, div, glob, layout, lcount, patch, ref, ref1, ref2, region, select, view, walk,
    slice = [].slice;

  ref = require('virtual-dom'), diff = ref.diff, patch = ref.patch, create = ref.create;

  ref1 = require('tagg'), capture = ref1.capture, div = ref1.div;

  ref2 = require('./fun'), select = ref2.select, OrderedMap = ref2.OrderedMap;

  VDOMOut = require('./vdomout');

  glob = null;

  glob = global || window;

  view = function(f) {
    var render;
    render = function() {
      var as, ptch, vt;
      as = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      vt = capture(new VDOMOut(), f, as);
      ptch = diff(render._vt, vt);
      render.el = patch(render.el, ptch);
      render._vt = vt;
      return render.el;
    };
    render.el = create((render._vt = capture(new VDOMOut(), div)), {
      document: glob.document
    });
    return render;
  };

  detach = function(view) {
    var ref3, ref4;
    if (!view) {
      return;
    }
    delete view._rg;
    return view != null ? (ref3 = view.el) != null ? (ref4 = ref3.parentNode) != null ? ref4.removeChild(view.el) : void 0 : void 0 : void 0;
  };

  region = function(n) {
    return {
      "data-region": n
    };
  };

  walk = function(node, f) {
    var c, i, len, ref3, results;
    f(node);
    ref3 = node.childNodes;
    results = [];
    for (i = 0, len = ref3.length; i < len; i++) {
      c = ref3[i];
      results.push(walk(c, f));
    }
    return results;
  };

  _lazy = null;

  lcount = 0;

  layout = function(f) {
    var inner, lid, makeRegionFunctions, regions, render;
    lid = lcount++;
    regions = {};
    inner = view(f);
    render = function() {
      var as, name, prevRegions, vw;
      as = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (_lazy) {
        throw new Error("Refusing to render layout when lazy evaluating");
      }
      try {
        for (name in regions) {
          vw = regions[name];
          if (vw) {
            detach(vw);
          }
        }
        return inner.apply(null, as);
      } finally {
        render.el = inner.el;
        prevRegions = regions;
        makeRegionFunctions();
        for (name in prevRegions) {
          vw = prevRegions[name];
          if (vw) {
            if (typeof render[name] === "function") {
              render[name](vw);
            }
          }
        }
      }
    };
    makeRegionFunctions = function() {
      regions = {};
      return walk(render.el, function(node) {
        var name, ref3, rg;
        name = (ref3 = node.dataset) != null ? ref3.region : void 0;
        if (!name) {
          return;
        }
        regions[name] = false;
        return render[name] = rg = function(vw) {
          var prev, ref4;
          if (_lazy) {
            return _lazy.set(lid + ":" + name, (function() {
              return rg(vw);
            }));
          }
          if ((prev = regions[name]) === vw) {
            return;
          }
          if ((prev != null ? (ref4 = prev.el) != null ? ref4.parentNode : void 0 : void 0) != null) {
            detach(prev);
          }
          if (vw) {
            if (vw._rg) {
              vw._rg(null);
            }
            regions[name] = vw;
            node.appendChild(vw.el);
            return vw._rg = render[name];
          } else {
            return delete regions[name];
          }
        };
      });
    };
    render();
    return render;
  };

  _lazylayout = function(suspend) {
    var i, k, l, len, ref3, results;
    if (suspend) {
      if (!_lazy) {
        return _lazy = new OrderedMap();
      }
    } else if (_lazy) {
      l = _lazy;
      _lazy = null;
      ref3 = l.order;
      results = [];
      for (i = 0, len = ref3.length; i < len; i++) {
        k = ref3[i];
        results.push(l.get(k)());
      }
      return results;
    }
  };

  module.exports = {
    view: view,
    layout: layout,
    region: region,
    _lazylayout: _lazylayout
  };

}).call(this);

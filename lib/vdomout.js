// Generated by CoffeeScript 1.9.1
(function() {
  var DataHook, EventHook, MUTATION_OPTS, MutationHook, NOT_ATTRIBUTES, VDOMOut, VNode, VText, camelize, prepareProps;

  VNode = require('virtual-dom/vnode/vnode');

  VText = require('virtual-dom/vnode/vtext');

  camelize = function(n) {
    return n.replace(/-(\w)/g, function(_, c) {
      return c.toUpperCase();
    });
  };

  module.exports = VDOMOut = (function() {
    function VDOMOut() {
      this.stack = [];
      this.stack.push(this.cur = {
        childs: [],
        vtree: []
      });
    }

    VDOMOut.prototype.start = function() {};

    VDOMOut.prototype.begin = function(name, vod, inProps) {
      var parent, props;
      props = prepareProps(inProps);
      if (vod) {
        if (!(this.stack.length > 1)) {
          throw new Error("Bad void element root: " + name);
        }
        return this.cur.childs.push({
          name: name,
          props: props
        });
      } else {
        parent = this.cur;
        this.stack.push(this.cur = {
          name: name,
          props: props,
          childs: [],
          vtrees: []
        });
        return parent.childs.push(this.cur);
      }
    };

    VDOMOut.prototype.text = function(text) {
      if (!this.cur) {
        throw new Error("Bad text element root: " + name);
      }
      return this.cur.childs.push({
        text: text
      });
    };

    VDOMOut.prototype.close = function(name) {
      this._childsToVTrees();
      this.stack.pop();
      return this.cur = this.stack[this.stack.length - 1];
    };

    VDOMOut.prototype._childsToVTrees = function() {
      return this.cur.vtrees = this.cur.childs.map(function(c) {
        if (c.text) {
          return new VText(c.text);
        } else {
          return new VNode(c.name, c.props, c.vtrees);
        }
      });
    };

    VDOMOut.prototype.end = function() {
      this._childsToVTrees();
      return this.cur.vtrees[0];
    };

    return VDOMOut;

  })();

  NOT_ATTRIBUTES = {
    "class": true,
    className: true,
    key: true,
    namespace: true,
    style: true
  };

  prepareProps = function(inp) {
    var attrs, k, props, v;
    props = {};
    attrs = props.attributes = {};
    for (k in inp) {
      v = inp[k];
      if (k.length > 5 && k.slice(0, 5) === 'data-') {
        props[k] = new DataHook(v);
      } else if (k === 'observe') {
        props[k] = new MutationHook(v);
      } else if (k.length > 2 && k.slice(0, 2) === 'on') {
        props[k] = new EventHook(v);
      } else {
        (NOT_ATTRIBUTES[k] ? props : attrs)[k] = v;
      }
    }
    if (inp["class"]) {
      props.className = inp["class"];
      delete props["class"];
    }
    return props;
  };

  VDOMOut.DataHook = DataHook = (function() {
    function DataHook(value) {
      this.value = value;
    }

    DataHook.prototype.hook = function(node, name, prevHook) {
      if ((prevHook != null ? prevHook.value : void 0) === this.value) {
        return;
      }
      node.setAttribute(name, this.value);
      if (!node.dataset) {
        node.dataset = {};
      }
      return node.dataset[camelize(name.slice(5))] = this.value;
    };

    DataHook.prototype.unhook = function(node, name, newHook) {
      if ((newHook != null ? newHook.value : void 0) === this.value) {
        return;
      }
      node.removeAttribute(name);
      return delete node.dataset[camelize(name.slice(5))];
    };

    return DataHook;

  })();

  VDOMOut.EventHook = EventHook = (function() {
    function EventHook(handler) {
      this.handler = handler;
    }

    EventHook.prototype.hook = function(node, name, prevHook) {
      var event;
      if ((prevHook != null ? prevHook.handler : void 0) === this.handler) {
        return;
      }
      event = name.slice(2);
      return node.addEventListener(event, this.handler);
    };

    EventHook.prototype.unhook = function(node, name, newHook) {
      var event;
      if ((newHook != null ? newHook.handler : void 0) === this.handler) {
        return;
      }
      event = name.slice(2);
      return node.removeEventListener(event, this.handler);
    };

    return EventHook;

  })();

  MUTATION_OPTS = {
    childList: true,
    attributes: true,
    attributeOldValue: true,
    subtree: true
  };

  VDOMOut.MutationHook = MutationHook = (function() {
    function MutationHook(arg) {
      var ref;
      this.arg = arg;
      this.callback = this.options = null;
      if (typeof this.arg === 'object') {
        ref = this.arg, this.callback = ref.callback, this.options = ref.options;
      }
      if (!this.callback) {
        this.callback = this.arg;
      }
      if (!this.options) {
        this.options = MUTATION_OPTS;
      }
      this.observer = new MutationObserver(this.callback);
    }

    MutationHook.prototype.hook = function(node, name, prevHook) {
      if ((prevHook != null ? prevHook.arg : void 0) === this.arg) {
        return;
      }
      return this.observer.observe(node, this.options);
    };

    MutationHook.prototype.unhook = function(node, name, newHook) {
      if ((newHook != null ? newHook.arg : void 0) === this.arg) {
        return;
      }
      return this.observer.disconnect();
    };

    return MutationHook;

  })();

}).call(this);

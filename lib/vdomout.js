// Generated by CoffeeScript 1.9.0
(function() {
  var DataHook, NOT_ATTRIBUTES, VDOMOut, VNode, VText, camelize, prepareProps;

  VNode = require('virtual-dom/vnode/vnode');

  VText = require('virtual-dom/vnode/vtext');

  module.exports = VDOMOut = (function() {
    function VDOMOut() {
      this.stack = [];
      this.stack.push(this.cur = {
        childs: [],
        vtree: []
      });
    }

    VDOMOut.prototype.start = function() {};

    VDOMOut.prototype.begin = function(name, vod, inProps) {
      var parent, props;
      props = prepareProps(inProps);
      if (vod) {
        if (!(this.stack.length > 1)) {
          throw new Error("Bad void element root: " + name);
        }
        return this.cur.childs.push({
          name: name,
          props: props
        });
      } else {
        parent = this.cur;
        this.stack.push(this.cur = {
          name: name,
          props: props,
          childs: [],
          vtrees: []
        });
        return parent.childs.push(this.cur);
      }
    };

    VDOMOut.prototype.text = function(text) {
      if (!this.cur) {
        throw new Error("Bad text element root: " + name);
      }
      return this.cur.childs.push({
        text: text
      });
    };

    VDOMOut.prototype.close = function(name) {
      this._childsToVTrees();
      this.stack.pop();
      return this.cur = this.stack[this.stack.length - 1];
    };

    VDOMOut.prototype._childsToVTrees = function() {
      return this.cur.vtrees = this.cur.childs.map(function(c) {
        if (c.text) {
          return new VText(c.text);
        } else {
          return new VNode(c.name, c.props, c.vtrees);
        }
      });
    };

    VDOMOut.prototype.end = function() {
      this._childsToVTrees();
      return this.cur.vtrees[0];
    };

    return VDOMOut;

  })();

  NOT_ATTRIBUTES = {
    "class": true,
    className: true,
    key: true,
    namespace: true,
    style: true
  };

  prepareProps = function(inp) {
    var attrs, isData, k, props, v;
    props = {};
    attrs = props.attributes = {};
    for (k in inp) {
      v = inp[k];
      isData = k.slice(0, 5) === 'data-';
      if (isData) {
        props[k] = DataHook(v);
      } else {
        (NOT_ATTRIBUTES[k] ? props : attrs)[k] = v;
      }
    }
    if (inp["class"]) {
      props.className = inp["class"];
      delete props["class"];
    }
    return props;
  };

  DataHook = (function() {
    function DataHook(_at_value) {
      this.value = _at_value;
      if (!(this instanceof DataHook)) {
        return new DataHook(this.value);
      }
    }

    DataHook.prototype.hook = function(node, name) {
      node.setAttribute(name, this.value);
      if (!node.dataset) {
        node.dataset = {};
      }
      return node.dataset[camelize(name.substring(5))] = this.value;
    };

    DataHook.prototype.unhook = function(node, name) {
      node.removeAttribute(name);
      return delete node.dataset[camelize(name.slice(0, 5))];
    };

    return DataHook;

  })();

  camelize = function(n) {
    return n.replace(/-(\w)/g, function(_, c) {
      return c.toUpperCase();
    });
  };

}).call(this);

// Generated by CoffeeScript 1.9.0
(function() {
  var action, current, doAction, handle, handlers, update, updates, _lazylayout,
    __slice = [].slice;

  _lazylayout = require('./view')._lazylayout;

  handlers = {};

  handle = function(name, handler) {
    return handlers[name] = handler;
  };

  current = null;

  updates = {};

  action = function() {
    var as, name;
    name = arguments[0], as = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return doAction(name, as);
  };

  update = function(name) {
    var qname;
    qname = "update:" + name;
    if (!current) {
      throw new Error("Rejected (" + qname + ") outside action");
    }
    if (!updates) {
      throw new Error("Rejected (" + qname + ") during updates for: " + current);
    }
    return updates[qname] = true;
  };

  doAction = function(name, as) {
    var qname, _updates;
    if (current) {
      throw new Error("Rejected (" + name + ") during action: " + current);
    }
    try {
      current = name;
      _lazylayout(true);
      return typeof handlers[name] === "function" ? handlers[name].apply(handlers, as) : void 0;
    } finally {
      _updates = updates;
      updates = null;
      try {
        for (qname in _updates) {
          if (typeof handlers[qname] === "function") {
            handlers[qname]();
          }
        }
      } finally {
        updates = {};
        current = null;
        _lazylayout(false);
      }
    }
  };

  module.exports = {
    handle: handle,
    action: action,
    update: update
  };

}).call(this);

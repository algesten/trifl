// Generated by CoffeeScript 1.9.0
(function() {
  var Router, decode, indexof, init, query, replaceplus, router, startswith, _lazylayout, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('./fun'), startswith = _ref.startswith, indexof = _ref.indexof;

  _lazylayout = require('./view')._lazylayout;

  replaceplus = function(s) {
    return s.replace(/\+/g, ' ');
  };

  decode = function(s) {
    return decodeURIComponent(replaceplus(s));
  };

  query = function(s, ret) {
    var key, m, val, _ref1;
    if (ret == null) {
      ret = {};
    }
    if (!s) {
      return ret;
    } else if (s[0] === '&') {
      return query(s.substring(1), ret);
    } else {
      _ref1 = s.match(/([^&=]+)=?([^&]*)/) || [''], m = _ref1[0], key = _ref1[1], val = _ref1[2];
      if (key) {
        ret[decode(key)] = decode(val);
      }
      return query(s.substring(m.length + 1), ret);
    }
  };

  Router = (function() {
    Router.prototype.loc = null;

    Router.prototype._route = function() {};

    Router.prototype._path = null;

    Router.prototype._exec = null;

    function Router(_at_win) {
      this.win = _at_win;
      this.exec = __bind(this.exec, this);
      this.path = __bind(this.path, this);
      this.route = __bind(this.route, this);
      this.navigate = __bind(this.navigate, this);
      this._check = __bind(this._check, this);
      this._consume = __bind(this._consume, this);
      this.win.addEventListener('onpopstate', this._check, false);
      this.loc = {};
    }

    Router.prototype._consume = function(loc, pos, query, fun) {
      var sexec, spath, sub;
      sub = loc.substring(pos);
      spath = this._path;
      sexec = this._exec;
      this._exec = (function(_this) {
        return function(f) {
          return f(sub, query);
        };
      })(this);
      this._path = (function(_this) {
        return function(p, f) {
          if (startswith(sub, p)) {
            return _this._consume(loc, pos + p.length, query, f);
          }
        };
      })(this);
      try {
        fun();
      } finally {
        this._path = spath;
        this._exec = sexec;
      }
      return true;
    };

    Router.prototype._check = function() {
      var winloc;
      winloc = this.win.location;
      if (this.loc.pathname === winloc.pathname && this.loc.search === winloc.search) {
        return false;
      }
      return this._run(winloc.pathname, winloc.search);
    };

    Router.prototype._run = function(pathname, search) {
      var q;
      if (pathname == null) {
        pathname = '/';
      }
      if (search == null) {
        search = '';
      }
      this.loc.pathname = pathname;
      this.loc.search = search;
      q = query(search[0] === '?' ? search.substring(1) : search);
      try {
        _lazylayout(true);
        return this._consume(pathname, 0, q, this._route);
      } finally {
        _lazylayout(false);
      }
    };

    Router.prototype.navigate = function(url) {
      this.win.history.pushState({}, '', url);
      this._check();
      return void 0;
    };

    Router.prototype.route = function(f) {
      this._route = f;
      this.loc = {};
      router._check();
      return void 0;
    };

    Router.prototype.path = function(p, f) {
      return typeof this._path === "function" ? this._path(p, f) : void 0;
    };

    Router.prototype.exec = function(f) {
      return typeof this._exec === "function" ? this._exec(f) : void 0;
    };

    return Router;

  })();

  router = null;

  (init = function() {
    return router = new Router(window);
  })();

  module.exports = {
    route: router.route,
    path: router.path,
    exec: router.exec,
    navigate: router.navigate
  };

  if (typeof global !== "undefined" && global !== null ? global.__TEST_ROUTER : void 0) {
    module.exports.query = query;
    module.exports.router = router;
    module.exports.reinit = init;
  }

}).call(this);

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.trifl = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*global require, module*/
var mixin  = require('./lib/fun').mixin;
var expose = require('./lib/fun').expose;
var route  = require('./lib/route');
var view   = require('./lib/view');
var action = require('./lib/action');
var tagg   = {tagg:require('tagg')};

var exports = mixin(route, view, action, tagg);

exports.expose   = expose(exports,   '__trifl');
tagg.tagg.expose = expose(tagg.tagg, '__tagg');

module.exports = exports;

},{"./lib/action":2,"./lib/fun":3,"./lib/route":4,"./lib/view":6,"tagg":8}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var _lazylayout, action, current, doAction, handle, handlers, updated,
    slice = [].slice;

  _lazylayout = require('./view')._lazylayout;

  handlers = {};

  handle = function(name, handler) {
    return handlers[name] = handler;
  };

  current = null;

  updated = {};

  action = function() {
    var as, name;
    name = arguments[0], as = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return doAction(name, as);
  };

  updated = function(name) {
    var qname;
    qname = "update:" + name;
    if (!current) {
      throw new Error("Rejected (" + qname + ") outside action");
    }
    if (!updated) {
      throw new Error("Rejected (" + qname + ") during updates for: " + current);
    }
    updated[qname] = true;
    return void 0;
  };

  doAction = function(name, as) {
    var _updated, qname;
    if (current) {
      throw new Error("Rejected (" + name + ") during action: " + current);
    }
    try {
      current = name;
      _lazylayout(true);
      return typeof handlers[name] === "function" ? handlers[name].apply(handlers, as) : void 0;
    } finally {
      _updated = updated;
      updated = null;
      try {
        for (qname in _updated) {
          if (typeof handlers[qname] === "function") {
            handlers[qname]();
          }
        }
      } finally {
        updated = {};
        current = null;
        _lazylayout(false);
      }
    }
  };

  module.exports = {
    handle: handle,
    action: action,
    updated: updated
  };

}).call(this);

},{"./view":6}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var I, OrderedMap, builtin, concat, expose, indexof, mixin, select, startswith,
    slice = [].slice;

  I = function(a) {
    return a;
  };

  builtin = I.bind.bind(I.call);

  startswith = function(s, i) {
    return s.slice(0, i.length) === i;
  };

  indexof = builtin(String.prototype.indexOf);

  concat = function() {
    var as, ref;
    as = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = []).concat.apply(ref, as);
  };

  mixin = function() {
    var j, k, len, o, os, r, v;
    os = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    r = {};
    for (j = 0, len = os.length; j < len; j++) {
      o = os[j];
      for (k in o) {
        v = o[k];
        r[k] = v;
      }
    }
    return r;
  };

  select = function(node, sel) {
    var doc;
    if (!node.parentNode) {
      doc = node.ownerDocument;
    }
    try {
      if (doc) {
        doc.body.appendChild(node);
      }
      switch (sel[0]) {
        case '.':
          return node.getElementsByClassName(sel.slice(1));
        case '#':
          return node.getElementById(sel.slice(1));
        default:
          return node.getElementsByTagName(sel);
      }
    } finally {
      if (doc) {
        doc.body.removeChild(node);
      }
    }
  };

  OrderedMap = (function() {
    function OrderedMap() {
      this.order = [];
      this.map = {};
    }

    OrderedMap.prototype.set = function(k, v) {
      if (!this.map.hasOwnProperty(k)) {
        this.order.push(k);
      }
      return this.map[k] = v;
    };

    OrderedMap.prototype.get = function(k) {
      return this.map[k];
    };

    return OrderedMap;

  })();

  expose = function(exp, guard) {
    return function() {
      var funs, j, k, len, obj, v;
      obj = arguments[0], funs = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (funs != null ? funs.length : void 0) {
        for (j = 0, len = funs.length; j < len; j++) {
          k = funs[j];
          obj[k] = exp[k];
        }
      } else if (!obj[guard]) {
        for (k in exp) {
          v = exp[k];
          if (k.indexOf("_") !== 0) {
            obj[k] = v;
          }
        }
        obj[guard] = true;
      }
      return exp;
    };
  };

  module.exports = {
    startswith: startswith,
    indexof: indexof,
    select: select,
    concat: concat,
    mixin: mixin,
    OrderedMap: OrderedMap,
    expose: expose
  };

}).call(this);

},{}],4:[function(require,module,exports){
(function (global){
// Generated by CoffeeScript 1.9.1
(function() {
  var Router, _lazylayout, decode, indexof, init, query, ref, replaceplus, router, startswith,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('./fun'), startswith = ref.startswith, indexof = ref.indexof;

  _lazylayout = require('./view')._lazylayout;

  replaceplus = function(s) {
    return s.replace(/\+/g, ' ');
  };

  decode = function(s) {
    return decodeURIComponent(replaceplus(s));
  };

  query = function(s, ret) {
    var arr, dkey, dval, key, m, prev, ref1, val;
    if (ret == null) {
      ret = {};
    }
    if (!s) {
      return ret;
    } else if (s[0] === '&') {
      return query(s.slice(1), ret);
    } else {
      ref1 = s.match(/([^&=]+)=?([^&]*)/) || [''], m = ref1[0], key = ref1[1], val = ref1[2];
      if (key) {
        dkey = decode(key);
        dval = decode(val);
        if ((prev = ret[dkey]) != null) {
          arr = Array.isArray(prev) ? prev : ret[dkey] = [prev];
          arr.push(decode(val));
        } else {
          ret[dkey] = dval;
        }
      }
      return query(s.substring(m.length + 1), ret);
    }
  };

  Router = (function() {
    Router.prototype.loc = null;

    Router.prototype._route = function() {};

    Router.prototype._path = null;

    Router.prototype._exec = null;

    function Router(win) {
      this.win = win;
      this.exec = bind(this.exec, this);
      this.path = bind(this.path, this);
      this.route = bind(this.route, this);
      this._lazynavigate = bind(this._lazynavigate, this);
      this.navigate = bind(this.navigate, this);
      this._check = bind(this._check, this);
      this._consume = bind(this._consume, this);
      this.win.addEventListener('onpopstate', this._check, false);
      this.loc = {};
    }

    Router.prototype._consume = function(loc, pos, query, fun) {
      var sexec, spath, sub;
      sub = loc.substring(pos);
      spath = this._path;
      sexec = this._exec;
      this._exec = (function(_this) {
        return function(f) {
          return f(sub, query);
        };
      })(this);
      this._path = (function(_this) {
        return function(p, f) {
          if (startswith(sub, p)) {
            return _this._consume(loc, pos + p.length, query, f);
          }
        };
      })(this);
      try {
        fun();
      } finally {
        this._path = spath;
        this._exec = sexec;
      }
      return true;
    };

    Router.prototype._check = function() {
      var pathname, ref1, search;
      ref1 = this.win.location, pathname = ref1.pathname, search = ref1.search;
      if (this.loc.pathname === pathname && this.loc.search === search) {
        return false;
      }
      return this._run(pathname, search);
    };

    Router.prototype._run = function(pathname, search) {
      var q;
      if (pathname == null) {
        pathname = '/';
      }
      if (search == null) {
        search = '';
      }
      this._setLoc(pathname, search);
      q = query(search[0] === '?' ? search.slice(1) : search);
      try {
        this._lazynavigate(true);
        _lazylayout(true);
        return this._consume(pathname, 0, q, this._route);
      } finally {
        this._lazynavigate(false);
        _lazylayout(false);
      }
    };

    Router.prototype._setLoc = function(pathname, search) {
      if (pathname == null) {
        pathname = '/';
      }
      if (search == null) {
        search = '';
      }
      this.loc.pathname = pathname;
      return this.loc.search = search;
    };

    Router.prototype.navigate = function(url, trigger) {
      var pathname, ref1, search;
      if (trigger == null) {
        trigger = true;
      }
      if (this._lazynav) {
        if (url) {
          this._lazynav = [url, trigger];
        }
      } else {
        this.win.history.pushState({}, '', url);
        if (trigger) {
          this._check();
        } else {
          ref1 = this.win.location, pathname = ref1.pathname, search = ref1.search;
          this._setLoc(pathname, search);
        }
      }
      return void 0;
    };

    Router.prototype._lazynavigate = function(suspend) {
      var args;
      if (suspend) {
        return this._lazynav = '__NOT';
      } else {
        args = this._lazynav;
        delete this._lazynav;
        if (args !== '__NOT') {
          return this.navigate.apply(this, args);
        }
      }
    };

    Router.prototype.route = function(f) {
      this._route = f;
      this.loc = {};
      router._check();
      return void 0;
    };

    Router.prototype.path = function(p, f) {
      return typeof this._path === "function" ? this._path(p, f) : void 0;
    };

    Router.prototype.exec = function(f) {
      return typeof this._exec === "function" ? this._exec(f) : void 0;
    };

    return Router;

  })();

  router = null;

  (init = function() {
    return router = new Router(window);
  })();

  module.exports = {
    route: router.route,
    path: router.path,
    exec: router.exec,
    navigate: router.navigate,
    _lazynavigate: router._lazynavigate
  };

  if (typeof global !== "undefined" && global !== null ? global.__TEST_ROUTER : void 0) {
    module.exports.query = query;
    module.exports.router = router;
    module.exports.reinit = init;
  }

}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./fun":3,"./view":6}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var DataHook, EventHook, MUTATION_OPTS, MutationHook, NOT_ATTRIBUTES, VDOMOut, VNode, VText, camelize, prepareProps;

  VNode = require('virtual-dom/vnode/vnode');

  VText = require('virtual-dom/vnode/vtext');

  camelize = function(n) {
    return n.replace(/-(\w)/g, function(_, c) {
      return c.toUpperCase();
    });
  };

  module.exports = VDOMOut = (function() {
    function VDOMOut() {
      this.stack = [];
      this.stack.push(this.cur = {
        childs: [],
        vtree: []
      });
    }

    VDOMOut.prototype.start = function() {};

    VDOMOut.prototype.begin = function(name, vod, inProps) {
      var parent, props;
      props = prepareProps(inProps);
      if (vod) {
        if (!(this.stack.length > 1)) {
          throw new Error("Bad void element root: " + name);
        }
        return this.cur.childs.push({
          name: name,
          props: props
        });
      } else {
        parent = this.cur;
        this.stack.push(this.cur = {
          name: name,
          props: props,
          childs: [],
          vtrees: []
        });
        return parent.childs.push(this.cur);
      }
    };

    VDOMOut.prototype.text = function(text) {
      if (!this.cur) {
        throw new Error("Bad text element root: " + name);
      }
      return this.cur.childs.push({
        text: text
      });
    };

    VDOMOut.prototype.close = function(name) {
      this._childsToVTrees();
      this.stack.pop();
      return this.cur = this.stack[this.stack.length - 1];
    };

    VDOMOut.prototype._childsToVTrees = function() {
      return this.cur.vtrees = this.cur.childs.map(function(c) {
        if (c.text) {
          return new VText(c.text);
        } else {
          return new VNode(c.name, c.props, c.vtrees);
        }
      });
    };

    VDOMOut.prototype.end = function() {
      this._childsToVTrees();
      return this.cur.vtrees[0];
    };

    return VDOMOut;

  })();

  NOT_ATTRIBUTES = {
    "class": true,
    className: true,
    key: true,
    namespace: true,
    style: true
  };

  prepareProps = function(inp) {
    var attrs, k, props, v;
    props = {};
    attrs = props.attributes = {};
    for (k in inp) {
      v = inp[k];
      if (k.length > 5 && k.slice(0, 5) === 'data-') {
        props[k] = new DataHook(v);
      } else if (k === 'observe') {
        props[k] = new MutationHook(v);
      } else if (k.length > 2 && k.slice(0, 2) === 'on') {
        props[k] = new EventHook(v);
      } else {
        (NOT_ATTRIBUTES[k] ? props : attrs)[k] = v;
      }
    }
    if (inp["class"]) {
      props.className = inp["class"];
      delete props["class"];
    }
    return props;
  };

  VDOMOut.DataHook = DataHook = (function() {
    function DataHook(value) {
      this.value = value;
    }

    DataHook.prototype.hook = function(node, name, prevHook) {
      if ((prevHook != null ? prevHook.value : void 0) === this.value) {
        return;
      }
      node.setAttribute(name, this.value);
      if (!node.dataset) {
        node.dataset = {};
      }
      return node.dataset[camelize(name.slice(5))] = this.value;
    };

    DataHook.prototype.unhook = function(node, name, newHook) {
      if ((newHook != null ? newHook.value : void 0) === this.value) {
        return;
      }
      node.removeAttribute(name);
      return delete node.dataset[camelize(name.slice(5))];
    };

    return DataHook;

  })();

  VDOMOut.EventHook = EventHook = (function() {
    function EventHook(handler) {
      this.handler = handler;
    }

    EventHook.prototype.hook = function(node, name, prevHook) {
      var event;
      if ((prevHook != null ? prevHook.handler : void 0) === this.handler) {
        return;
      }
      event = name.slice(2);
      return node.addEventListener(event, this.handler);
    };

    EventHook.prototype.unhook = function(node, name, newHook) {
      var event;
      if ((newHook != null ? newHook.handler : void 0) === this.handler) {
        return;
      }
      event = name.slice(2);
      return node.removeEventListener(event, this.handler);
    };

    return EventHook;

  })();

  MUTATION_OPTS = {
    childList: true,
    attributes: true,
    attributeOldValue: true,
    subtree: true
  };

  VDOMOut.MutationHook = MutationHook = (function() {
    function MutationHook(arg) {
      var ref;
      this.arg = arg;
      this.callback = this.options = null;
      if (typeof this.arg === 'object') {
        ref = this.arg, this.callback = ref.callback, this.options = ref.options;
      }
      if (!this.callback) {
        this.callback = this.arg;
      }
      if (!this.options) {
        this.options = MUTATION_OPTS;
      }
      this.observer = new MutationObserver(this.callback);
    }

    MutationHook.prototype.hook = function(node, name, prevHook) {
      if ((prevHook != null ? prevHook.arg : void 0) === this.arg) {
        return;
      }
      return this.observer.observe(node, this.options);
    };

    MutationHook.prototype.unhook = function(node, name, newHook) {
      if ((newHook != null ? newHook.arg : void 0) === this.arg) {
        return;
      }
      return this.observer.disconnect();
    };

    return MutationHook;

  })();

}).call(this);

},{"virtual-dom/vnode/vnode":38,"virtual-dom/vnode/vtext":40}],6:[function(require,module,exports){
(function (global){
// Generated by CoffeeScript 1.9.1
(function() {
  var OrderedMap, VDOMOut, _lazy, _lazylayout, capture, create, detach, diff, div, glob, layout, lcount, patch, ref, ref1, ref2, region, select, view, walk,
    slice = [].slice;

  ref = require('virtual-dom'), diff = ref.diff, patch = ref.patch, create = ref.create;

  ref1 = require('tagg'), capture = ref1.capture, div = ref1.div;

  ref2 = require('./fun'), select = ref2.select, OrderedMap = ref2.OrderedMap;

  VDOMOut = require('./vdomout');

  glob = null;

  glob = global || window;

  view = function(f) {
    var render;
    render = function() {
      var as, ptch, vt;
      as = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      vt = capture(new VDOMOut(), f, as);
      ptch = diff(render._vt, vt);
      render.el = patch(render.el, ptch);
      render._vt = vt;
      return render.el;
    };
    render.el = create((render._vt = capture(new VDOMOut(), div)), {
      document: glob.document
    });
    return render;
  };

  detach = function(view) {
    var ref3, ref4;
    if (!view) {
      return;
    }
    delete view._rg;
    return view != null ? (ref3 = view.el) != null ? (ref4 = ref3.parentNode) != null ? ref4.removeChild(view.el) : void 0 : void 0 : void 0;
  };

  region = function(n) {
    return {
      "data-region": n
    };
  };

  walk = function(node, f) {
    var c, i, len, ref3, results;
    f(node);
    ref3 = node.childNodes;
    results = [];
    for (i = 0, len = ref3.length; i < len; i++) {
      c = ref3[i];
      results.push(walk(c, f));
    }
    return results;
  };

  _lazy = null;

  lcount = 0;

  layout = function(f) {
    var inner, lid, makeRegionFunctions, regions, render;
    lid = lcount++;
    regions = {};
    inner = view(f);
    render = function() {
      var as, name, prevRegions, vw;
      as = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (_lazy) {
        throw new Error("Refusing to render layout when lazy evaluating");
      }
      try {
        for (name in regions) {
          vw = regions[name];
          if (vw) {
            detach(vw);
          }
        }
        return inner.apply(null, as);
      } finally {
        render.el = inner.el;
        prevRegions = regions;
        makeRegionFunctions();
        for (name in prevRegions) {
          vw = prevRegions[name];
          if (vw) {
            if (typeof render[name] === "function") {
              render[name](vw);
            }
          }
        }
      }
    };
    makeRegionFunctions = function() {
      regions = {};
      return walk(render.el, function(node) {
        var name, ref3, rg;
        name = (ref3 = node.dataset) != null ? ref3.region : void 0;
        if (!name) {
          return;
        }
        regions[name] = false;
        return render[name] = rg = function(vw) {
          var prev, ref4;
          if (_lazy) {
            return _lazy.set(lid + ":" + name, (function() {
              return rg(vw);
            }));
          }
          if ((prev = regions[name]) === vw) {
            return;
          }
          if ((prev != null ? (ref4 = prev.el) != null ? ref4.parentNode : void 0 : void 0) != null) {
            detach(prev);
          }
          if (vw) {
            if (vw._rg) {
              vw._rg(null);
            }
            regions[name] = vw;
            node.appendChild(vw.el);
            return vw._rg = render[name];
          } else {
            return delete regions[name];
          }
        };
      });
    };
    render();
    return render;
  };

  _lazylayout = function(suspend) {
    var i, k, l, len, ref3, results;
    if (suspend) {
      if (!_lazy) {
        return _lazy = new OrderedMap();
      }
    } else if (_lazy) {
      l = _lazy;
      _lazy = null;
      ref3 = l.order;
      results = [];
      for (i = 0, len = ref3.length; i < len; i++) {
        k = ref3[i];
        results.push(l.get(k)());
      }
      return results;
    }
  };

  module.exports = {
    view: view,
    layout: layout,
    region: region,
    _lazylayout: _lazylayout
  };

}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./fun":3,"./vdomout":5,"tagg":8,"virtual-dom":12}],7:[function(require,module,exports){

},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.9.0
(function() {
  var StringOut, attr, attrs, bool, capture, esc, esca, isfunction, isplain, isprimitive, isstring, mixin, not_, out, tag, tags, unnest,
    __slice = [].slice;

  isplain = function(o) {
    return !!o && typeof o === 'object' && o.constructor === Object;
  };

  isstring = function(s) {
    return typeof s === 'string';
  };

  isprimitive = function(a) {
    var _ref;
    return (_ref = typeof a) === 'boolean' || _ref === 'number' || _ref === 'string' || _ref === 'symbol';
  };

  isfunction = function(s) {
    return typeof s === 'function';
  };

  not_ = function(f) {
    return function() {
      var a;
      a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return !f.apply(null, a);
    };
  };

  mixin = function() {
    var k, o, os, r, v, _i, _len;
    os = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    r = {};
    for (_i = 0, _len = os.length; _i < _len; _i++) {
      o = os[_i];
      for (k in o) {
        v = o[k];
        r[k] = v;
      }
    }
    return r;
  };

  bool = {};

  'allowfullscreen,async,autofocus,autoplay,checked,controls,default,defer,disabled,formnovalidate,hidden,ismap,itemscope,loop,multiple,muted,novalidate,open,readonly,required,reversed,scoped,seamless,selected,sortable,typemustmatch,html'.split(',').forEach(function(a) {
    return bool[a] = true;
  });

  esc = function(s) {
    if (s == null) {
      s = '';
    }
    return s.replace(/&/g, '&amp;').replace(/</g, '&lt;');
  };

  esca = function(s) {
    return esc(s).replace(/"/g, '&quot;');
  };

  attr = function(k, v) {
    if (bool[k]) {
      if (v) {
        return "" + (esca(k));
      } else {
        return '';
      }
    } else {
      return (esca(k)) + "=\"" + (esca(v)) + "\"";
    }
  };

  attrs = function(a) {
    var k, v;
    return ((function() {
      var _results;
      _results = [];
      for (k in a) {
        v = a[k];
        _results.push(attr(k, v));
      }
      return _results;
    })()).join(' ');
  };

  unnest = function(bind, f) {
    if (isfunction(f)) {
      return unnest(bind, f.call(bind));
    } else if (isprimitive(f)) {
      return out.text(String(f));
    }
  };

  out = null;

  tag = function(name, vod) {
    var tagf;
    return tagf = function() {
      var args, f, funs, objs, _i, _len;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!out) {
        return capture(new StringOut, tagf, args);
      }
      objs = args.filter(isplain).reduce((function(p, c) {
        return mixin(p, c);
      }), {});
      funs = args.filter(not_(isplain)).map(function(a) {
        if (!isfunction(a)) {
          return function() {
            return a;
          };
        } else {
          return a;
        }
      });
      out.begin(name, vod, objs);
      for (_i = 0, _len = funs.length; _i < _len; _i++) {
        f = funs[_i];
        unnest(this, f);
      }
      if (!vod) {
        out.close(name);
      }
      return void 0;
    };
  };

  StringOut = (function() {
    function StringOut() {
      this.buf = [];
    }

    StringOut.prototype.start = function() {};

    StringOut.prototype.begin = function(name, vod, props) {
      var a;
      return this.buf.push(("<" + name) + ((a = attrs(props)).length ? " " + a : "") + ">");
    };

    StringOut.prototype.text = function(t) {
      return this.buf.push(esc(t));
    };

    StringOut.prototype.close = function(name) {
      return this.buf.push("</" + name + ">");
    };

    StringOut.prototype.end = function() {
      return this.buf.join('');
    };

    return StringOut;

  })();

  capture = function(_out, tagf, args) {
    try {
      out = _out;
      out.start();
      tagf.apply(this, args != null ? args : []);
    } finally {
      out = null;
    }
    return _out.end();
  };

  tags = {
    tag: tag,
    capture: capture
  };

  'html,head,style,title,address,article,body,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,blockquote,dd,div,dl,dt,figcaption,figure,li,main,ol,p,pre,ul,a,abbr,b,bdi,bdo,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,audio,map,video,iframe,object,canvas,noscript,script,del,ins,caption,colgroup,table,tbody,td,tfoot,th,thead,tr,button,datalist,fieldset,form,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,decorator,element,shadow,template'.split(',').forEach(function(t) {
    return tags[t] = tag(t);
  });

  'area,base,br,col,embed,hr,img,input,keygen,link,meta,param,source,track,wbr'.split(',').forEach(function(t) {
    return tags[t] = tag(t, true);
  });

  tags.html5 = function() {
    var as;
    as = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return tag('!DOCTYPE', true)({
      html: true
    }, '\n', function() {
      return tags.html.apply(tags, as);
    });
  };

  if (typeof module === 'object') {
    module.exports = tags;
  } else if (typeof define === 'function' && define.amd) {
    define(function() {
      return tags;
    });
  } else {
    this.tagg = tags;
  }

}).call(this);

//# sourceMappingURL=tagg.js.map

},{}],9:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":22}],10:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":42}],11:[function(require,module,exports){
var h = require("./virtual-hyperscript/index.js")

module.exports = h

},{"./virtual-hyperscript/index.js":29}],12:[function(require,module,exports){
var diff = require("./diff.js")
var patch = require("./patch.js")
var h = require("./h.js")
var create = require("./create-element.js")
var VNode = require('./vnode/vnode.js')
var VText = require('./vnode/vtext.js')

module.exports = {
    diff: diff,
    patch: patch,
    h: h,
    create: create,
    VNode: VNode,
    VText: VText
}

},{"./create-element.js":9,"./diff.js":10,"./h.js":11,"./patch.js":20,"./vnode/vnode.js":38,"./vnode/vtext.js":40}],13:[function(require,module,exports){
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

},{}],14:[function(require,module,exports){
'use strict';

var OneVersionConstraint = require('individual/one-version');

var MY_VERSION = '7';
OneVersionConstraint('ev-store', MY_VERSION);

var hashKey = '__EV_STORE_KEY@' + MY_VERSION;

module.exports = EvStore;

function EvStore(elem) {
    var hash = elem[hashKey];

    if (!hash) {
        hash = elem[hashKey] = {};
    }

    return hash;
}

},{"individual/one-version":16}],15:[function(require,module,exports){
(function (global){
'use strict';

/*global window, global*/

var root = typeof window !== 'undefined' ?
    window : typeof global !== 'undefined' ?
    global : {};

module.exports = Individual;

function Individual(key, value) {
    if (key in root) {
        return root[key];
    }

    root[key] = value;

    return value;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],16:[function(require,module,exports){
'use strict';

var Individual = require('./index.js');

module.exports = OneVersion;

function OneVersion(moduleName, version, defaultValue) {
    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;
    var enforceKey = key + '_ENFORCE_SINGLETON';

    var versionValue = Individual(enforceKey, version);

    if (versionValue !== version) {
        throw new Error('Can only have one copy of ' +
            moduleName + '.\n' +
            'You already have version ' + versionValue +
            ' installed.\n' +
            'This means you cannot install version ' + version);
    }

    return Individual(key, defaultValue);
}

},{"./index.js":15}],17:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":7}],18:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],19:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],20:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":25}],21:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, propName, propValue, previous);
        } else if (isHook(propValue)) {
            removeProperty(node, propName, propValue, previous)
            if (propValue.hook) {
                propValue.hook(node,
                    propName,
                    previous ? previous[propName] : undefined)
            }
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, propName, propValue, previous) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName, propValue)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":33,"is-object":18}],22:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":31,"../vnode/is-vnode.js":34,"../vnode/is-vtext.js":35,"../vnode/is-widget.js":36,"./apply-properties":21,"global/document":17}],23:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],24:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var render = require("./create-element")
var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = render(vText, renderOptions)

        if (parentNode && newNode !== domNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = render(vNode, renderOptions)

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, moves) {
    var childNodes = domNode.childNodes
    var keyMap = {}
    var node
    var remove
    var insert

    for (var i = 0; i < moves.removes.length; i++) {
        remove = moves.removes[i]
        node = childNodes[remove.from]
        if (remove.key) {
            keyMap[remove.key] = node
        }
        domNode.removeChild(node)
    }

    var length = childNodes.length
    for (var j = 0; j < moves.inserts.length; j++) {
        insert = moves.inserts[j]
        node = keyMap[insert.key]
        // this is the weirdest bug i've ever seen in webkit
        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":36,"../vnode/vpatch.js":39,"./apply-properties":21,"./create-element":22,"./update-widget":26}],25:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches) {
    return patchRecursive(rootNode, patches)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions) {
        renderOptions = { patch: patchRecursive }
        if (ownerDocument !== document) {
            renderOptions.document = ownerDocument
        }
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./dom-index":23,"./patch-op":24,"global/document":17,"x-is-array":19}],26:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":36}],27:[function(require,module,exports){
'use strict';

var EvStore = require('ev-store');

module.exports = EvHook;

function EvHook(value) {
    if (!(this instanceof EvHook)) {
        return new EvHook(value);
    }

    this.value = value;
}

EvHook.prototype.hook = function (node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = this.value;
};

EvHook.prototype.unhook = function(node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = undefined;
};

},{"ev-store":14}],28:[function(require,module,exports){
'use strict';

module.exports = SoftSetHook;

function SoftSetHook(value) {
    if (!(this instanceof SoftSetHook)) {
        return new SoftSetHook(value);
    }

    this.value = value;
}

SoftSetHook.prototype.hook = function (node, propertyName) {
    if (node[propertyName] !== this.value) {
        node[propertyName] = this.value;
    }
};

},{}],29:[function(require,module,exports){
'use strict';

var isArray = require('x-is-array');

var VNode = require('../vnode/vnode.js');
var VText = require('../vnode/vtext.js');
var isVNode = require('../vnode/is-vnode');
var isVText = require('../vnode/is-vtext');
var isWidget = require('../vnode/is-widget');
var isHook = require('../vnode/is-vhook');
var isVThunk = require('../vnode/is-thunk');

var parseTag = require('./parse-tag.js');
var softSetHook = require('./hooks/soft-set-hook.js');
var evHook = require('./hooks/ev-hook.js');

module.exports = h;

function h(tagName, properties, children) {
    var childNodes = [];
    var tag, props, key, namespace;

    if (!children && isChildren(properties)) {
        children = properties;
        props = {};
    }

    props = props || properties || {};
    tag = parseTag(tagName, props);

    // support keys
    if (props.hasOwnProperty('key')) {
        key = props.key;
        props.key = undefined;
    }

    // support namespace
    if (props.hasOwnProperty('namespace')) {
        namespace = props.namespace;
        props.namespace = undefined;
    }

    // fix cursor bug
    if (tag === 'INPUT' &&
        !namespace &&
        props.hasOwnProperty('value') &&
        props.value !== undefined &&
        !isHook(props.value)
    ) {
        props.value = softSetHook(props.value);
    }

    transformProperties(props);

    if (children !== undefined && children !== null) {
        addChild(children, childNodes, tag, props);
    }


    return new VNode(tag, props, childNodes, key, namespace);
}

function addChild(c, childNodes, tag, props) {
    if (typeof c === 'string') {
        childNodes.push(new VText(c));
    } else if (isChild(c)) {
        childNodes.push(c);
    } else if (isArray(c)) {
        for (var i = 0; i < c.length; i++) {
            addChild(c[i], childNodes, tag, props);
        }
    } else if (c === null || c === undefined) {
        return;
    } else {
        throw UnexpectedVirtualElement({
            foreignObject: c,
            parentVnode: {
                tagName: tag,
                properties: props
            }
        });
    }
}

function transformProperties(props) {
    for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
            var value = props[propName];

            if (isHook(value)) {
                continue;
            }

            if (propName.substr(0, 3) === 'ev-') {
                // add ev-foo support
                props[propName] = evHook(value);
            }
        }
    }
}

function isChild(x) {
    return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);
}

function isChildren(x) {
    return typeof x === 'string' || isArray(x) || isChild(x);
}

function UnexpectedVirtualElement(data) {
    var err = new Error();

    err.type = 'virtual-hyperscript.unexpected.virtual-element';
    err.message = 'Unexpected virtual child passed to h().\n' +
        'Expected a VNode / Vthunk / VWidget / string but:\n' +
        'got:\n' +
        errorString(data.foreignObject) +
        '.\n' +
        'The parent vnode is:\n' +
        errorString(data.parentVnode)
        '\n' +
        'Suggested fix: change your `h(..., [ ... ])` callsite.';
    err.foreignObject = data.foreignObject;
    err.parentVnode = data.parentVnode;

    return err;
}

function errorString(obj) {
    try {
        return JSON.stringify(obj, null, '    ');
    } catch (e) {
        return String(obj);
    }
}

},{"../vnode/is-thunk":32,"../vnode/is-vhook":33,"../vnode/is-vnode":34,"../vnode/is-vtext":35,"../vnode/is-widget":36,"../vnode/vnode.js":38,"../vnode/vtext.js":40,"./hooks/ev-hook.js":27,"./hooks/soft-set-hook.js":28,"./parse-tag.js":30,"x-is-array":19}],30:[function(require,module,exports){
'use strict';

var split = require('browser-split');

var classIdSplit = /([\.#]?[a-zA-Z0-9_:-]+)/;
var notClassId = /^\.|#/;

module.exports = parseTag;

function parseTag(tag, props) {
    if (!tag) {
        return 'DIV';
    }

    var noId = !(props.hasOwnProperty('id'));

    var tagParts = split(tag, classIdSplit);
    var tagName = null;

    if (notClassId.test(tagParts[1])) {
        tagName = 'DIV';
    }

    var classes, part, type, i;

    for (i = 0; i < tagParts.length; i++) {
        part = tagParts[i];

        if (!part) {
            continue;
        }

        type = part.charAt(0);

        if (!tagName) {
            tagName = part;
        } else if (type === '.') {
            classes = classes || [];
            classes.push(part.substring(1, part.length));
        } else if (type === '#' && noId) {
            props.id = part.substring(1, part.length);
        }
    }

    if (classes) {
        if (props.className) {
            classes.push(props.className);
        }

        props.className = classes.join(' ');
    }

    return props.namespace ? tagName : tagName.toUpperCase();
}

},{"browser-split":13}],31:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":32,"./is-vnode":34,"./is-vtext":35,"./is-widget":36}],32:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],33:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],34:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":37}],35:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":37}],36:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],37:[function(require,module,exports){
module.exports = "2"

},{}],38:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":32,"./is-vhook":33,"./is-vnode":34,"./is-widget":36,"./version":37}],39:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":37}],40:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":37}],41:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook")

module.exports = diffProps

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
  if (Object.getPrototypeOf) {
    return Object.getPrototypeOf(value)
  } else if (value.__proto__) {
    return value.__proto__
  } else if (value.constructor) {
    return value.constructor.prototype
  }
}

},{"../vnode/is-vhook":33,"is-object":18}],42:[function(require,module,exports){
var isArray = require("x-is-array")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var handleThunk = require("../vnode/handle-thunk")

var diffProps = require("./diff-props")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var orderedSet = reorder(aChildren, b.children)
    var bChildren = orderedSet.children

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (orderedSet.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(
            VPatch.ORDER,
            a,
            orderedSet.moves
        ))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b)
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true
        }
    }

    return false
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {
    // O(M) time, O(M) memory
    var bChildIndex = keyIndex(bChildren)
    var bKeys = bChildIndex.keys
    var bFree = bChildIndex.free

    if (bFree.length === bChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(N) time, O(N) memory
    var aChildIndex = keyIndex(aChildren)
    var aKeys = aChildIndex.keys
    var aFree = aChildIndex.free

    if (aFree.length === aChildren.length) {
        return {
            children: bChildren,
            moves: null
        }
    }

    // O(MAX(N, M)) memory
    var newChildren = []

    var freeIndex = 0
    var freeCount = bFree.length
    var deletedItems = 0

    // Iterate through a and match a node in b
    // O(N) time,
    for (var i = 0 ; i < aChildren.length; i++) {
        var aItem = aChildren[i]
        var itemIndex

        if (aItem.key) {
            if (bKeys.hasOwnProperty(aItem.key)) {
                // Match up the old keys
                itemIndex = bKeys[aItem.key]
                newChildren.push(bChildren[itemIndex])

            } else {
                // Remove old keyed items
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        } else {
            // Match the item in a with the next free item in b
            if (freeIndex < freeCount) {
                itemIndex = bFree[freeIndex++]
                newChildren.push(bChildren[itemIndex])
            } else {
                // There are no free items in b to match with
                // the free items in a, so the extra free nodes
                // are deleted.
                itemIndex = i - deletedItems++
                newChildren.push(null)
            }
        }
    }

    var lastFreeIndex = freeIndex >= bFree.length ?
        bChildren.length :
        bFree[freeIndex]

    // Iterate through b and append any new keys
    // O(M) time
    for (var j = 0; j < bChildren.length; j++) {
        var newItem = bChildren[j]

        if (newItem.key) {
            if (!aKeys.hasOwnProperty(newItem.key)) {
                // Add any new keyed items
                // We are adding new items to the end and then sorting them
                // in place. In future we should insert new items in place.
                newChildren.push(newItem)
            }
        } else if (j >= lastFreeIndex) {
            // Add any leftover non-keyed items
            newChildren.push(newItem)
        }
    }

    var simulate = newChildren.slice()
    var simulateIndex = 0
    var removes = []
    var inserts = []
    var simulateItem

    for (var k = 0; k < bChildren.length;) {
        var wantedItem = bChildren[k]
        simulateItem = simulate[simulateIndex]

        // remove items
        while (simulateItem === null && simulate.length) {
            removes.push(remove(simulate, simulateIndex, null))
            simulateItem = simulate[simulateIndex]
        }

        if (!simulateItem || simulateItem.key !== wantedItem.key) {
            // if we need a key in this position...
            if (wantedItem.key) {
                if (simulateItem && simulateItem.key) {
                    // if an insert doesn't put this key in place, it needs to move
                    if (bKeys[simulateItem.key] !== k + 1) {
                        removes.push(remove(simulate, simulateIndex, simulateItem.key))
                        simulateItem = simulate[simulateIndex]
                        // if the remove didn't put the wanted item in place, we need to insert it
                        if (!simulateItem || simulateItem.key !== wantedItem.key) {
                            inserts.push({key: wantedItem.key, to: k})
                        }
                        // items are matching, so skip ahead
                        else {
                            simulateIndex++
                        }
                    }
                    else {
                        inserts.push({key: wantedItem.key, to: k})
                    }
                }
                else {
                    inserts.push({key: wantedItem.key, to: k})
                }
                k++
            }
            // a key in simulate has no matching wanted key, remove it
            else if (simulateItem && simulateItem.key) {
                removes.push(remove(simulate, simulateIndex, simulateItem.key))
            }
        }
        else {
            simulateIndex++
            k++
        }
    }

    // remove all the remaining nodes from simulate
    while(simulateIndex < simulate.length) {
        simulateItem = simulate[simulateIndex]
        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))
    }

    // If the only moves we have are deletes then we can just
    // let the delete patch remove these items.
    if (removes.length === deletedItems && !inserts.length) {
        return {
            children: newChildren,
            moves: null
        }
    }

    return {
        children: newChildren,
        moves: {
            removes: removes,
            inserts: inserts
        }
    }
}

function remove(arr, index, key) {
    arr.splice(index, 1)

    return {
        from: index,
        key: key
    }
}

function keyIndex(children) {
    var keys = {}
    var free = []
    var length = children.length

    for (var i = 0; i < length; i++) {
        var child = children[i]

        if (child.key) {
            keys[child.key] = i
        } else {
            free.push(i)
        }
    }

    return {
        keys: keys,     // A hash of key name to index
        free: free,     // An array of unkeyed item indices
    }
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":31,"../vnode/is-thunk":32,"../vnode/is-vnode":34,"../vnode/is-vtext":35,"../vnode/is-widget":36,"../vnode/vpatch":39,"./diff-props":41,"x-is-array":19}]},{},[1])(1)
});